"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var di_ts_1 = require("@onscroll/di-ts");
var AbstractTransport_1 = require("../AbstractTransport");
var StatsDClientFactory_1 = require("./StatsDClientFactory/StatsDClientFactory");
var StatsDTransport = (function (_super) {
    __extends(StatsDTransport, _super);
    function StatsDTransport(statsDConnectorFactory) {
        var _this = _super.call(this) || this;
        _this.statsDConnectorFactory = statsDConnectorFactory;
        return _this;
    }
    StatsDTransport.prototype.initialize = function (settings) {
        _super.prototype.initialize.call(this, settings);
        this.statsDConnector = this.statsDConnectorFactory.createClient(settings);
    };
    StatsDTransport.prototype.increment = function (fieldName, delta) {
        this.statsDConnector.increment(this.getFieldName(fieldName), delta);
    };
    StatsDTransport.prototype.decrement = function (fieldName, delta) {
        this.statsDConnector.decrement(this.getFieldName(fieldName), delta);
    };
    StatsDTransport.prototype.gauge = function (fieldName, value) {
        this.statsDConnector.gauge(this.getFieldName(fieldName), value);
    };
    StatsDTransport.prototype.gaugeDelta = function (fieldName, value) {
        this.statsDConnector.gaugeDelta(this.getFieldName(fieldName), value);
    };
    StatsDTransport.prototype.getFieldName = function (fieldName) {
        return this.settings.name + "." + fieldName;
    };
    StatsDTransport = __decorate([
        di_ts_1.Inject,
        __metadata("design:paramtypes", [StatsDClientFactory_1.StatsDClientFactory])
    ], StatsDTransport);
    return StatsDTransport;
}(AbstractTransport_1.AbstractTransport));
exports.StatsDTransport = StatsDTransport;
//# sourceMappingURL=StatsDTransport.js.map