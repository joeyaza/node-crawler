"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractTransport_1 = require("./../AbstractTransport");
var moment = require("moment");
var Logger_1 = require("../../../Logger/Logger");
var ConsoleTransport = (function (_super) {
    __extends(ConsoleTransport, _super);
    function ConsoleTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConsoleTransport.prototype.debug = function (message) {
        this.writeToConsole("DEBUG", message);
    };
    ConsoleTransport.prototype.info = function (message) {
        this.writeToConsole("INFO", message);
    };
    ConsoleTransport.prototype.error = function (message) {
        this.writeToConsole("ERROR", message);
    };
    ConsoleTransport.prototype.increment = function (fieldName, delta) {
        if (this.logLevel === Logger_1.LogLevel.DEBUG) {
            this.debug("Increment: " + fieldName + ", value: " + delta);
        }
    };
    ConsoleTransport.prototype.decrement = function (fieldName, delta) {
        if (this.logLevel === Logger_1.LogLevel.DEBUG) {
            this.debug("Decrement: " + fieldName + ", value: " + delta);
        }
    };
    ConsoleTransport.prototype.gauge = function (fieldName, value) {
        if (this.logLevel === Logger_1.LogLevel.DEBUG) {
            this.debug("Gauge: " + fieldName + ", value: " + value);
        }
    };
    ConsoleTransport.prototype.gaugeDelta = function (fieldName, value) {
        if (this.logLevel === Logger_1.LogLevel.DEBUG) {
            this.debug("GaugeDelta: " + fieldName + ", value: " + value);
        }
    };
    ConsoleTransport.prototype.prepareMessage = function (message) {
        if (message instanceof Error) {
            return message.message + "\n" + message.stack;
        }
        if (typeof message === "object") {
            return JSON.stringify(message, null, 2);
        }
        return message;
    };
    ConsoleTransport.prototype.writeToConsole = function (label, message) {
        console.log("%s: " + label + ": %s", moment().format(), this.prepareMessage(message));
    };
    return ConsoleTransport;
}(AbstractTransport_1.AbstractTransport));
exports.ConsoleTransport = ConsoleTransport;
//# sourceMappingURL=ConsoleTransport.js.map