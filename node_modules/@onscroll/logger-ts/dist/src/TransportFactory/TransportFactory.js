"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Transports = require("./Transports/Transports");
var di_ts_1 = require("@onscroll/di-ts");
var Logger_1 = require("../Logger/Logger");
var TransportFactory = (function () {
    function TransportFactory(injector) {
        this.injector = injector;
    }
    TransportFactory.prototype.createTransport = function (type, settings, logLevel) {
        if (logLevel === void 0) { logLevel = Logger_1.LogLevel.DEBUG; }
        var TransportCtor = Transports[type];
        if (TransportCtor) {
            var transport = this.injector.get(TransportCtor);
            transport.initialize(settings, logLevel);
            return transport;
        }
        throw new Error("Invalid transport name: " + type);
    };
    TransportFactory = __decorate([
        di_ts_1.Inject,
        __metadata("design:paramtypes", [di_ts_1.Injector])
    ], TransportFactory);
    return TransportFactory;
}());
exports.TransportFactory = TransportFactory;
//# sourceMappingURL=TransportFactory.js.map