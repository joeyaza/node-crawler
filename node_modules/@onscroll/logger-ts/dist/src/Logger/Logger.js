"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var di_ts_1 = require("@onscroll/di-ts");
var TransportFactory_1 = require("../TransportFactory/TransportFactory");
var configurator_1 = require("@onscroll/configurator");
var Logger = (function () {
    function Logger(transportFactory) {
        this.transportFactory = transportFactory;
        this.logLevel = LogLevel[this.config.level];
        this.transports = this.parseTransports(this.config.transports);
    }
    Logger.prototype.debug = function (message) {
        return this.writeLog(LogLevel.DEBUG, message);
    };
    Logger.prototype.info = function (message) {
        return this.writeLog(LogLevel.INFO, message);
    };
    Logger.prototype.log = function (message) {
        return this.writeLog(LogLevel.DEBUG, message);
    };
    Logger.prototype.error = function (message) {
        return this.writeLog(LogLevel.ERROR, message);
    };
    Logger.prototype.increment = function (fieldName, delta) {
        if (delta === void 0) { delta = 1; }
        return this.updateMetrics("increment", fieldName, delta);
    };
    Logger.prototype.decrement = function (fieldName, delta) {
        if (delta === void 0) { delta = 1; }
        return this.updateMetrics("decrement", fieldName, delta);
    };
    Logger.prototype.gauge = function (fieldName, value) {
        return this.updateMetrics("gauge", fieldName, value);
    };
    Logger.prototype.gaugeDelta = function (fieldName, value) {
        return this.updateMetrics("gaugeDelta", fieldName, value);
    };
    Logger.prototype.parseTransports = function (transportSettings) {
        var _this = this;
        return _.chain(transportSettings).filter("enabled").map(function (settings) {
            var options = _this.setDefaultOptions(settings.options);
            return _this.transportFactory.createTransport(settings.type, options, _this.logLevel);
        }).value();
    };
    Logger.prototype.writeLog = function (logLevel, message) {
        if (!this.isSupportedLevel(logLevel)) {
            return false;
        }
        _.each(this.transports, function (transport) {
            transport.log(logLevel, message);
        });
        return true;
    };
    Logger.prototype.updateMetrics = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _.each(this.transports, function (transport) {
            transport[method].apply(transport, args);
        });
        return true;
    };
    Logger.prototype.isSupportedLevel = function (logLevel) {
        return logLevel >= this.logLevel;
    };
    Logger.prototype.setDefaultOptions = function (options) {
        if (!options) {
            return options;
        }
        if (!options.name) {
            options.name = this.config.name;
        }
        return options;
    };
    __decorate([
        configurator_1.Configure("Logger"),
        __metadata("design:type", Object)
    ], Logger.prototype, "config", void 0);
    Logger = __decorate([
        di_ts_1.Inject,
        __metadata("design:paramtypes", [TransportFactory_1.TransportFactory])
    ], Logger);
    return Logger;
}());
exports.Logger = Logger;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["ERROR"] = 2] = "ERROR";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=Logger.js.map