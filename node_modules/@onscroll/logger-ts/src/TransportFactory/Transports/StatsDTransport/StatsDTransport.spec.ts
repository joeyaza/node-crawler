import {Injector} from "@onscroll/di-ts";
import {expect} from "chai";
import {StatsDTransport} from "./StatsDTransport";
import {StatsDClientFactoryMock} from "./StatsDClientFactory/StatsDClientFactoryMock";
import {StatsDClientMock} from "./StatsDClientFactory/StatsDClientMock";
import {SpyProvider} from "@onscroll/spy-provider";


const injector = new Injector([StatsDClientFactoryMock]),
    statsDTransport: StatsDTransport = injector.get(StatsDTransport),
    transportSettings = {
        name: "mockName",
        host: "localhost",
        port: 1337
    };

describe("StatsDTransport", () => {

    let statsDIncrementSpy,
        statsDDecrementSpy,
        statsDGaugeSpy,
        statsDGaugeDeltaSpy,
        factorySpy;

    beforeEach(() => {

        statsDIncrementSpy = SpyProvider.getSpyFor(StatsDClientMock, "increment");
        statsDDecrementSpy = SpyProvider.getSpyFor(StatsDClientMock, "decrement");
        statsDGaugeSpy = SpyProvider.getSpyFor(StatsDClientMock, "gauge");
        statsDGaugeDeltaSpy = SpyProvider.getSpyFor(StatsDClientMock, "gaugeDelta");
        factorySpy = SpyProvider.getSpyFor(StatsDClientFactoryMock, "createClient");

    });

    afterEach(() => {

        statsDIncrementSpy.reset();
        statsDDecrementSpy.reset();
        statsDGaugeSpy.reset();
        statsDGaugeDeltaSpy.reset();
        factorySpy.reset();

    });

    describe("when initialized", () => {

        it("should call connector factory with right settings", () => {

            statsDTransport.initialize(transportSettings);

            expect(factorySpy.called).to.equal(true);
            expect(factorySpy.args[0][0]).to.equal(transportSettings);

        });

    });

    describe("when asked to increment a field", () => {

        it("should call increment method", () => {

            statsDTransport.increment("test", 1);
            expect(statsDIncrementSpy.called).to.be.equal(true);
            expect(statsDIncrementSpy.args[0][0]).to.contains("mockName.test");

        });

    });

    describe("when asked to decrement a field", () => {

        it("should call decrement method", () => {

            statsDTransport.decrement("test", 1);
            expect(statsDDecrementSpy.called).to.be.equal(true);
            expect(statsDDecrementSpy.args[0][0]).to.contains("mockName.test");

        });

    });

    describe("when asked to gauge a field", () => {

        it("should call gauge method", () => {

            statsDTransport.gauge("test", 1);
            expect(statsDGaugeSpy.called).to.be.equal(true);
            expect(statsDGaugeSpy.args[0][0]).to.contains("mockName.test");

        });

    });

    describe("when asked to gaugeDelta a field", () => {

        it("should call gaugeDelta method", () => {

            statsDTransport.gaugeDelta("test", 1);
            expect(statsDGaugeDeltaSpy.called).to.be.equal(true);
            expect(statsDGaugeDeltaSpy.args[0][0]).to.contains("mockName.test");

        });

    });

});
