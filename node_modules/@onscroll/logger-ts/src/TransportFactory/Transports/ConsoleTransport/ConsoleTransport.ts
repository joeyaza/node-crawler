import {AbstractTransport} from "./../AbstractTransport";
import * as moment from "moment";
import {LogLevel} from "../../../Logger/Logger";

export class ConsoleTransport extends AbstractTransport {

    public debug(message: any) {

        this.writeToConsole("DEBUG", message);

    }


    public info(message: any) {

        this.writeToConsole("INFO", message);

    }


    public error(message: any) {

        this.writeToConsole("ERROR", message);

    }


    public increment(fieldName: string, delta: number) {

        if (this.logLevel === LogLevel.DEBUG) {

            this.debug("Increment: " + fieldName + ", value: " + delta);

        }
    }

    public decrement(fieldName: string, delta: number) {

        if (this.logLevel === LogLevel.DEBUG) {

            this.debug("Decrement: " + fieldName + ", value: " + delta);

        }
    }


    public gauge(fieldName: string, value: number) {

        if (this.logLevel === LogLevel.DEBUG) {

            this.debug("Gauge: " + fieldName + ", value: " + value);

        }
    }

    public gaugeDelta(fieldName: string, value: number) {

        if (this.logLevel === LogLevel.DEBUG) {

            this.debug("GaugeDelta: " + fieldName + ", value: " + value);

        }

    }

    public prepareMessage(message: any): string {

        if (message instanceof Error) {

            return message.message + "\n" + message.stack;

        }

        if (typeof message === "object") {

            return JSON.stringify(message, null, 2);

        }
        return message;

    }


    private writeToConsole(label: string, message: any) {

        console.log("%s: " + label + ": %s", moment().format(), this.prepareMessage(message));

    }

}
