import {Injector} from "@onscroll/di-ts";
import {expect} from "chai";
import * as sinon from "sinon";
import {ConsoleTransport} from "./ConsoleTransport";
import {LogLevel} from "../../../Logger/Logger";

const injector = new Injector(),
    consoleTransport: ConsoleTransport = injector.get(ConsoleTransport);

describe("ConsoleTransport", () => {

    let consoleSpy;

    beforeEach(() => {

        consoleSpy = sinon.stub(console, "log");

    });

    afterEach(() => {

        consoleSpy.restore();

    });

    describe("when asked to prepare message", () => {

        describe("when message is a string", () => {

            it("should return same message", () => {

                const message = "sample message",
                    preparedMessage = consoleTransport.prepareMessage(message);

                expect(preparedMessage).to.equal("sample message");
            });

        });

        describe("when message is an object", () => {

            it("should return stringified object", () => {

                const message = {message: "sample message"},
                    preparedMessage = consoleTransport.prepareMessage(message);

                expect(preparedMessage).to.equal(JSON.stringify(message, null, 2));
            });

        });

        describe("when message is an error", () => {

            it("should return error as a string", () => {

                const message = new Error("Mock error"),
                    preparedMessage = consoleTransport.prepareMessage(message);

                expect(preparedMessage).to.equal(message.message + "\n" + message.stack);
            });

        });

    });


    describe("when asked to increment", () => {

        describe("when in DEBUG mode", () => {

            it("should call console.log", () => {

                consoleTransport.initialize({}, LogLevel.DEBUG);
                consoleTransport.increment("mockField", 1);

                expect(consoleSpy.called).to.equal(true);

            });

        });

        describe("when not in DEBUG mode", () => {

            it("should not call console.log", () => {

                consoleTransport.initialize({}, LogLevel.ERROR);
                consoleTransport.increment("mockField", 1);

                expect(consoleSpy.called).to.equal(false);

            });

        });

    });


    describe("when asked to decrement", () => {

        describe("when in DEBUG mode", () => {

            it("should call console.log", () => {

                consoleTransport.initialize({}, LogLevel.DEBUG);
                consoleTransport.decrement("mockField", 1);

                expect(consoleSpy.called).to.equal(true);

            });

        });

        describe("when not in DEBUG mode", () => {

            it("should not call console.log", () => {

                consoleTransport.initialize({}, LogLevel.ERROR);
                consoleTransport.decrement("mockField", 1);

                expect(consoleSpy.called).to.equal(false);

            });

        });

    });


    describe("when asked to gauge", () => {

        describe("when in DEBUG mode", () => {

            it("should call console.log", () => {

                consoleTransport.initialize({}, LogLevel.DEBUG);
                consoleTransport.gauge("mockField", 1);

                expect(consoleSpy.called).to.equal(true);


            });

        });

        describe("when not in DEBUG mode", () => {

            it("should not call console.log", () => {

                consoleTransport.initialize({}, LogLevel.ERROR);
                consoleTransport.gauge("mockField", 1);

                expect(consoleSpy.called).to.equal(false);

            });

        });

    });

    describe("when asked to gaugeDelta", () => {

        describe("when in DEBUG mode", () => {

            it("should call console.log", () => {

                consoleTransport.initialize({}, LogLevel.DEBUG);
                consoleTransport.gaugeDelta("mockField", 1);

                expect(consoleSpy.called).to.equal(true);


            });

        });

        describe("when not in DEBUG mode", () => {

            it("should not call console.log", () => {

                consoleTransport.initialize({}, LogLevel.ERROR);
                consoleTransport.gaugeDelta("mockField", 1);

                expect(consoleSpy.called).to.equal(false);

            });

        });

    });

});
