import {LogLevel} from "../../Logger/Logger";
export abstract class AbstractTransport {

    protected _logLevel: LogLevel;
    private _settings;

    get settings() {
        return this._settings;
    }

    get logLevel() {
        return this._logLevel;
    }


    public initialize(settings, logLevel: LogLevel = LogLevel.DEBUG) {

        this._settings = settings;
        this._logLevel = logLevel;

    }

    public log(logLevel: LogLevel, message: any) {

        const methodName: string = LogLevel[logLevel].toLowerCase();

        if (!this[methodName]) {

            throw new Error("Method does not exist");

        }

        this[methodName](message);

    }

    public debug(message: any) {}
    public info(message: any) {}
    public error(message: any) {}

    public increment(fieldName: string, delta: number) {}
    public decrement(fieldName: string, delta: number) {}
    public gauge(fieldName: string, value: number) {}
    public gaugeDelta(fieldName: string, value: number) {}


}
