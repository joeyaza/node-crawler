import {AbstractTransport} from "./../AbstractTransport";
import {Inject} from "@onscroll/di-ts";
import {BunyanLoggerFactory} from "./BunyanLoggerFactory/BunyanLoggerFactory";
import * as _ from "lodash";


@Inject
export class LogglyTransport extends AbstractTransport {

    private logger: any;
    private tag: string = "";

    constructor(private bunyanLoggerFactory: BunyanLoggerFactory) {

        super();

    }


    public initialize(settings) {

        super.initialize(settings);

        this.logger = this.bunyanLoggerFactory.createLogger(this.settings);
        this.tag = this.settings.tag;

    }


    public debug(message: any) {

        this.logger.debug(this.prepareMessage(message, "DEBUG", this.tag));

    }


    public info(message: any) {

        this.logger.info(this.prepareMessage(message, "INFO", this.tag));

    }


    public error(message: any) {

        this.logger.error(this.prepareMessage(message, "ERROR", this.tag));

    }


    public prepareMessage(message, level, tag): any {

        let preparedMessage;

        if (message instanceof Error) {

            preparedMessage = {
                error: message.message,
                stack: message.stack
            };

        }

        if (typeof message !== "object") {

            preparedMessage = {
                message: message,
            };

        }

        if (!preparedMessage) {

            preparedMessage = _.clone(message);

        }

        preparedMessage.label = level;
        preparedMessage.tag = tag;

        return preparedMessage;

    }

}
