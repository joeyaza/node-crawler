import {Injector} from "@onscroll/di-ts";
import {expect} from "chai";
import {TransportFactory} from "./TransportFactory";
import {ConsoleTransport} from "./Transports/ConsoleTransport/ConsoleTransport";
import {LogglyTransport} from "./Transports/LogglyTransport/LogglyTransport";
import {StatsDTransport} from "./Transports/StatsDTransport/StatsDTransport";
import {LogLevel} from "../Logger/Logger";

const injector = new Injector([]),
    transportFactory = injector.get(TransportFactory);

const logglyTransportSettings = {
    mockParameter: "parameter-value",
    name: "mockName",
    token: "mockToken",
    subdomain: "mockSubdomain"
};

const statsDSettings = {
    port: 1233,
    host: "localhost",
    name: "mockName"
};

describe("TransportFactory", () => {

    describe("when asked to create an instance of transport", () => {

        it("should create instance of correct transport", () => {

            const consoleTransport = transportFactory.createTransport("ConsoleTransport", {}),
                logglyTransport = transportFactory.createTransport("LogglyTransport", logglyTransportSettings),
                statsDTransport = transportFactory.createTransport("StatsDTransport", statsDSettings);

            expect(consoleTransport).to.be.instanceOf(ConsoleTransport);
            expect(logglyTransport).to.be.instanceOf(LogglyTransport);
            expect(statsDTransport).to.be.instanceOf(StatsDTransport);

        });

        it("should set correct logLevel", () => {

            const transport1 = transportFactory.createTransport("ConsoleTransport", {}, LogLevel.ERROR);

            expect(transport1.logLevel).to.equal(LogLevel.ERROR);

            const transport2 = transportFactory.createTransport("ConsoleTransport", {});

            expect(transport2.logLevel).to.equal(LogLevel.DEBUG);

        });

    });


    describe("when asked to create nonexistent transport", () => {

        it("should throw an exception", () => {

            const createTransportInstance = () => {

                transportFactory.createTransport("nonexistent", {});

            };

            expect(createTransportInstance).to.throw();


        });

    });


    it("should call initialize method of transport with correct arguments", () => {

        const logglyTransport = transportFactory.createTransport("LogglyTransport", logglyTransportSettings);

        expect(logglyTransport.settings).to.deep.equal(logglyTransportSettings);

    });

});
