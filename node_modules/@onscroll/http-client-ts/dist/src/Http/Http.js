"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var NodeCacheFactory_1 = require("../NodeCacheFactory/NodeCacheFactory");
var di_ts_1 = require("@onscroll/di-ts");
var RequestPromiseProvider_1 = require("../RequestPromise/RequestPromiseProvider/RequestPromiseProvider");
var configurator_1 = require("@onscroll/configurator");
var Http = (function () {
    function Http(nodeCacheFactory, requestPromiseProvider) {
        this.nodeCacheFactory = nodeCacheFactory;
        this.requestPromiseProvider = requestPromiseProvider;
        this.requestPromise = this.requestPromiseProvider.get();
        this.cache = this.nodeCacheFactory.createCache(this._config.ttl || 0);
    }
    Object.defineProperty(Http.prototype, "config", {
        set: function (config) {
            this._config = config;
        },
        enumerable: true,
        configurable: true
    });
    Http.prototype.get = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.getResponse(this.requestPromise.get, args);
    };
    Http.prototype.post = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.getResponse(this.requestPromise.post, args);
    };
    Http.prototype.getResponse = function (method, args) {
        if (this._config.cache) {
            var cachedValue = this.getFromCache(args[0]);
            if (cachedValue) {
                return cachedValue;
            }
        }
        var responsePromise = method.apply(this.requestPromise, args);
        if (this._config.cache) {
            this.saveToCache(args[0], responsePromise);
        }
        return responsePromise;
    };
    Http.prototype.getFromCache = function (key) {
        return this.cache.get(key);
    };
    Http.prototype.saveToCache = function (key, cachedPromise) {
        this.cache.set(key, cachedPromise);
    };
    return Http;
}());
__decorate([
    configurator_1.Configure("HttpClient"),
    __metadata("design:type", Object)
], Http.prototype, "_config", void 0);
Http = __decorate([
    di_ts_1.Inject,
    __metadata("design:paramtypes", [NodeCacheFactory_1.NodeCacheFactory,
        RequestPromiseProvider_1.RequestPromiseProvider])
], Http);
exports.Http = Http;
