"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var di_ts_1 = require("@onscroll/di-ts");
var RestifyProvider_1 = require("./RestifyProvider");
var spy_provider_1 = require("@onscroll/spy-provider");
var RestifyProviderMock = (function () {
    function RestifyProviderMock() {
    }
    RestifyProviderMock.prototype.get = function () {
        return new RestifyMock();
    };
    return RestifyProviderMock;
}());
RestifyProviderMock = __decorate([
    di_ts_1.Provide(RestifyProvider_1.RestifyProvider)
], RestifyProviderMock);
exports.RestifyProviderMock = RestifyProviderMock;
var RestifyMock = (function () {
    function RestifyMock() {
    }
    RestifyMock.prototype.get = function (path, handler) {
        RestifyMock.routes[path] = handler;
    };
    RestifyMock.prototype.createServer = function () {
        return this;
    };
    RestifyMock.prototype.queryParser = function () {
    };
    RestifyMock.prototype.acceptParser = function () {
    };
    RestifyMock.prototype.use = function () {
    };
    RestifyMock.prototype.pre = function () {
    };
    RestifyMock.prototype.bodyParser = function () {
    };
    RestifyMock.prototype.CORS = function () {
    };
    RestifyMock.prototype.fullResponse = function () {
    };
    RestifyMock.prototype.listen = function () {
    };
    return RestifyMock;
}());
RestifyMock.routes = {};
__decorate([
    spy_provider_1.SpyOn,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], RestifyMock.prototype, "get", null);
exports.RestifyMock = RestifyMock;
