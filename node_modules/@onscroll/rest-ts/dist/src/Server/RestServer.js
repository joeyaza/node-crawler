"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var di_ts_1 = require("@onscroll/di-ts");
var configurator_1 = require("@onscroll/configurator");
var Router_1 = require("../Router/Router");
var _ = require("lodash");
var RestifyProvider_1 = require("./RestifyProvider");
var RestServer = (function () {
    function RestServer(injector, router, restifyProvider) {
        this.injector = injector;
        this.router = router;
        this.restifyProvider = restifyProvider;
        var restify = restifyProvider.get();
        this.restifyServer = restify.createServer();
        this.restifyServer.use(restify.acceptParser(["application/json"]));
        this.restifyServer.use(restify.queryParser());
        this.restifyServer.use(restify.bodyParser());
        if (this.config.corsEnabled) {
            this.restifyServer.pre(restify.CORS({ origins: ["*"] }));
            this.restifyServer.use(restify.fullResponse());
        }
    }
    RestServer.prototype.use = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.restifyServer.use.apply(this.restifyServer, args);
    };
    RestServer.prototype.start = function (controllers, callback) {
        var _this = this;
        _.each(controllers, function (controller) {
            _this.injector.get(controller.constructor);
        });
        if (this.config.healthCheckRoute) {
            this.restifyServer.get(this.config.healthCheckRoute, this.handleHealthRoute.bind(this));
        }
        this.router.initializeRoutes(this.restifyServer);
        this.restifyServer.listen(this.config.port, callback);
    };
    RestServer.prototype.handleHealthRoute = function (request, response) {
        return response.send(200, this.getStatus());
    };
    RestServer.prototype.getStatus = function () {
        return {
            "uptime": process.uptime(),
            "memory": process.memoryUsage()
        };
    };
    return RestServer;
}());
__decorate([
    configurator_1.Configure("RestServer"),
    __metadata("design:type", Object)
], RestServer.prototype, "config", void 0);
RestServer = __decorate([
    di_ts_1.Inject,
    __metadata("design:paramtypes", [di_ts_1.Injector,
        Router_1.Router,
        RestifyProvider_1.RestifyProvider])
], RestServer);
exports.RestServer = RestServer;
