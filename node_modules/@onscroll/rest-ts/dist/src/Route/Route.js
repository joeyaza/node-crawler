"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var Promise = require("bluebird");
var InjectorProvider_1 = require("../InjectorProvider");
var InvalidRequestException_1 = require("../Exceptions/InvalidRequestException/InvalidRequestException");
var Route = (function () {
    function Route(_method, _path, _callback, _controller, _schema) {
        this._method = _method;
        this._path = _path;
        this._callback = _callback;
        this._controller = _controller;
        this._schema = _schema;
    }
    Object.defineProperty(Route.prototype, "method", {
        get: function () {
            return this._method;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Route.prototype, "path", {
        get: function () {
            return this._path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Route.prototype, "callback", {
        get: function () {
            return this._callback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Route.prototype, "schema", {
        get: function () {
            return this._schema;
        },
        enumerable: true,
        configurable: true
    });
    Route.prototype.createRequestHandler = function () {
        var _this = this;
        return function (request, response) {
            var data = _.extend(request.body || {}, request.params, request.query) || {};
            var controller = InjectorProvider_1.InjectorProvider.get().get(_this._controller.constructor);
            return callPromisified(controller, _this.callback, data, request.headers)
                .then(function (result) {
                return response.send(200, result);
            }).catch(InvalidRequestException_1.InvalidRequestException, function (error) {
                return response.send(400, error.message);
            }).catch(function (error) {
                return response.send(500, error.message);
            });
        };
        function callPromisified(scope, callback, data, headers) {
            try {
                var future = callback.call(scope, data, headers);
                if (!(future instanceof Promise)) {
                    return Promise.resolve(future);
                }
                return future;
            }
            catch (error) {
                return Promise.reject(error);
            }
        }
    };
    return Route;
}());
exports.Route = Route;
