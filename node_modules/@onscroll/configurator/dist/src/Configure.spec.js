"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Configure_1 = require("./Configure");
var chai_1 = require("chai");
var TestClass = (function () {
    function TestClass() {
    }
    return TestClass;
}());
__decorate([
    Configure_1.Configure("MockConfig.one"),
    __metadata("design:type", Object)
], TestClass.prototype, "config", void 0);
describe("Configure", function () {
    describe("when asked to inject config with no modifier", function () {
        it("should assign whole object", function () {
            chai_1.expect(new TestClass().config).to.deep.equal({
                "mockField": "test"
            });
        });
    });
    describe("when asked to inject config with default fields", function () {
        it("should assign default fields", function () {
            var TestClassDefault = (function () {
                function TestClassDefault() {
                }
                return TestClassDefault;
            }());
            __decorate([
                Configure_1.Configure("MockConfig.one", { defaultValue: "1" }),
                __metadata("design:type", Object)
            ], TestClassDefault.prototype, "config", void 0);
            chai_1.expect(new TestClassDefault().config).to.deep.equal({
                "mockField": "test",
                "defaultValue": "1"
            });
        });
        describe("when the field is already in config.json", function () {
            it("should keep the value from config file", function () {
                var TestClassDefaultTwo = (function () {
                    function TestClassDefaultTwo() {
                    }
                    return TestClassDefaultTwo;
                }());
                __decorate([
                    Configure_1.Configure("MockConfig.two", { defaultValue: "1" }),
                    __metadata("design:type", Object)
                ], TestClassDefaultTwo.prototype, "config", void 0);
                chai_1.expect(new TestClassDefaultTwo().config).to.deep.equal({
                    "mockField": "test",
                    "defaultValue": "2"
                });
            });
        });
    });
    describe("when asked to inject config with default nested values", function () {
        it("should inject correct config", function () {
            var TestClassDefaultThree = (function () {
                function TestClassDefaultThree() {
                }
                return TestClassDefaultThree;
            }());
            __decorate([
                Configure_1.Configure("MockConfig.three", { nestedObject: {
                        nestedMockField: 1
                    }
                }),
                __metadata("design:type", Object)
            ], TestClassDefaultThree.prototype, "config", void 0);
            chai_1.expect(new TestClassDefaultThree().config).to.deep.equal({
                "mockField": "test",
                "nestedObject": {
                    "nestedMockField": 1,
                    "existingField": 2
                }
            });
        });
    });
});
