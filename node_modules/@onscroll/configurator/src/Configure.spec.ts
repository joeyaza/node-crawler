import {Configure} from "./Configure";
import {expect} from "chai";

class TestClass {

    @Configure("MockConfig.one")
    public config;

}


describe("Configure", () => {

    describe("when asked to inject config with no modifier", () => {

        it("should assign whole object", () => {

            expect(new TestClass().config).to.deep.equal({
                "mockField": "test"
            });

        });

    });


    describe("when asked to inject config with default fields", () => {

        it("should assign default fields", () => {


            class TestClassDefault {

                @Configure("MockConfig.one", {defaultValue: "1"})
                public config;

            }

            expect(new TestClassDefault().config).to.deep.equal({
                "mockField": "test",
                "defaultValue": "1"
            });

        });


        describe("when the field is already in config.json", () => {

            it("should keep the value from config file", () => {

                class TestClassDefaultTwo {

                    @Configure("MockConfig.two", {defaultValue: "1"})
                    public config;

                }


                expect(new TestClassDefaultTwo().config).to.deep.equal({
                    "mockField": "test",
                    "defaultValue": "2"
                });

            });

        });

    });


    describe("when asked to inject config with default nested values", () => {

        it("should inject correct config", () => {


            class TestClassDefaultThree {

                @Configure("MockConfig.three", {nestedObject: {
                    nestedMockField: 1}
                })
                public config;

            }


            expect(new TestClassDefaultThree().config).to.deep.equal({
                "mockField": "test",
                "nestedObject": {
                    "nestedMockField": 1,
                    "existingField": 2
                }
            });

        });

    });


});